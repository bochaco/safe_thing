@startuml
title **Use Case: Subscribing to Wallet Topics and Receiving Notifications**

participant "SAFEthing A" as thingA
participant "SAFEthing Framework\nwithin SAFEthing A" as frameworkA
participant "SAFEthing B" as thingB
participant "SAFEthing Framework\nwithin SAFEthing B" as frameworkB
participant "SAFE Network" as safenet

activate thingA
thingA -> frameworkA: New(thingA_id)
activate frameworkA
thingA <-- frameworkA: Ok
thingA -> frameworkA: GetThingInfo(thingB_id)

frameworkA -> safenet: FetchMD( XoRName(thingB_id) )
activate safenet

frameworkA <-- safenet: Ok(ThingB info)
deactivate safenet

thingA <-- frameworkA: Done(ThingB info, topics,\nstatus = 'published')
deactivate frameworkA

thingA -> frameworkA: Subscribe(thingB_id, topic_name, call_back_function)
activate frameworkA

frameworkA -> safenet: CreateMD/UpdateMD( XoRName(thingA_id),\ngetSubscriptionsEntry(thingB_id).add(topic_name) )
activate safenet

frameworkA <-- safenet: Ok
deactivate safenet

frameworkA -> frameworkA: Add (thingB_id, topic_name) to the cached\nlist of topics to monitor

thingA <-- frameworkA: Ok
deactivate frameworkA
deactivate thingA

...later on...
thingB -> thingB: Event(topic_name)
activate thingB

thingB -> frameworkB: Notify(topic_name, topic_data)
activate frameworkB

frameworkB -> safenet: UpdateMD( XoRName(thingB_id),\ngetTopicEntry(topic_name).addNotification(topic_data) )
activate safenet

frameworkB <-- safenet: Ok
deactivate safenet

thingB <-- frameworkB: Ok
deactivate frameworkB
deactivate thingB

...

frameworkA -> frameworkA: Monitor loop tick
activate frameworkA

frameworkA -> frameworkA: Get cached list\nof topics to monitor

frameworkA -> safenet: FetchMD( XoRName(thingB_id),\ngetTopicEntry(topic_name).fetchNotifications() )
activate safenet

frameworkA <-- safenet: Notifications([ (topic_name, topic_data) ] )
deactivate safenet

thingA <- frameworkA: call_back_function(topic_name, topic_data)
activate thingA

thingA --> frameworkA: Ok
deactivate frameworkA

thingA -> thingA: Action based on notification
deactivate thingA

@enduml
